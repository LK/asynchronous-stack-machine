/* opcodes
    0000 = HALT
    0001 = PUSHC
    0010 = POP
    0011 = POPOUT
    0100 = PUSHREG
    0101 = POPREG
    0110 = ADD
    0111 = SUB
    1000 = JMP
    1001 = BRZ
    1010 = BRLZ
*/

vars {
  /* Off-chip interface */
  chan<12> PC;
  chan<12> IN;
  chan<12> OUT;

  /* FETCH */
  chan<12> FEX;
  int<1> isbr;
  int<4> fetch_op;
  int<8> fetch_data;
  int<12> temp;
  int<12> pc_index;

  /* EXECUTE */
  int<1> exec_op_0;
  int<1> exec_op_1;
  int<1> exec_op_2;
  int<1> exec_op_3;
  int<8> exec_data;
  int<8> exec_dump;
  int<12> exec_temp;
  int<12> exec_pc;
  int<1> exec_func_bit;

  /* STACK */
	int<1> stack0_is_full;
	int<1> stack0_op;
	int<8> stack0_data;
	chan<1> stack0_op_chan;
	chan<8> stack0_comm_chan;

	int<1> stack1_is_full;
	int<1> stack1_op;
	int<8> stack1_data;
	chan<1> stack1_op_chan;
	chan<8> stack1_comm_chan;

	int<1> stack2_is_full;
	int<1> stack2_op;
	int<8> stack2_data;
	chan<1> stack2_op_chan;
	chan<8> stack2_comm_chan;

  /* REGS */
  int<8> reg0;
  int<8> reg1;
  int<8> reg2;
  int<8> reg3;
}

chp {
  *[ PC!(pc_index); IN?(fetch_op, fetch_data); isbr := is_branch_1(fetch_op);
      [ isbr -> FEX!(fetch_op, fetch_data); FEX!(pc_index); FEX?(pc_index)
      [] else -> pc_index := pcincrement_12(pc_index); FEX!(fetch_op, fetch_data); FEX?(temp)
      ]
  ]
||
  *[ FEX?(exec_op_0, exec_op_1, exec_op_2, exec_op_3, exec_data);
    [ ~exec_op_0 & ~exec_op_1 & ~exec_op_2 & ~exec_op_3 -> skip
    [] ~exec_op_0 & ~exec_op_1 & ~exec_op_2 & exec_op_3 -> stack0_op_chan!1; stack0_comm_chan!exec_data
    [] ~exec_op_0 & ~exec_op_1 & exec_op_2 & ~exec_op_3 -> stack0_op_chan!0; stack0_comm_chan?exec_data
    [] ~exec_op_0 & ~exec_op_1 & exec_op_2 & exec_op_3 -> stack0_op_chan!0; stack0_comm_chan?exec_data; OUT!(exec_op, exec_data)
    [] ~exec_op_0 & exec_op_1 & ~exec_op_2 & ~exec_op_3 -> stack0_op_chan!1;
      exec_func_bit := is_reg0_1(exec_data); [ exec_func_bit -> stack0_comm_chan!reg0 ];
      exec_func_bit := is_reg1_1(exec_data); [ exec_func_bit -> stack0_comm_chan!reg1 ];
      exec_func_bit := is_reg2_1(exec_data); [ exec_func_bit -> stack0_comm_chan!reg2 ];
      exec_func_bit := is_reg3_1(exec_data); [ exec_func_bit -> stack0_comm_chan!reg3 ]
    [] ~exec_op_0 & exec_op_1 & ~exec_op_2 & exec_op_3 -> stack0_op_chan!0;
      exec_func_bit := is_reg0_1(exec_data); [ exec_func_bit -> stack0_comm_chan?reg0 ];
      exec_func_bit := is_reg1_1(exec_data); [ exec_func_bit -> stack0_comm_chan?reg1 ];
      exec_func_bit := is_reg2_1(exec_data); [ exec_func_bit -> stack0_comm_chan?reg2 ];
      exec_func_bit := is_reg3_1(exec_data); [ exec_func_bit -> stack0_comm_chan?reg3 ]
    [] ~exec_op_0 & exec_op_1 & exec_op_2 & ~exec_op_3 -> stack1_data := stackadd_8(stack0_data, stack1_data); stack0_op_chan!0; stack0_comm_chan?exec_dump
    [] ~exec_op_0 & exec_op_1 & exec_op_2 & exec_op_3 -> stack1_data := stacksub_8(stack0_data, stack1_data); stack0_op_chan!0; stack0_comm_chan?exec_dump
    [] exec_op_0 & ~exec_op_1 & ~exec_op_2 & ~exec_op_3 -> FEX?(exec_pc); exec_temp := pcadd_12(exec_pc, exec_data)
    [] exec_op_0 & ~exec_op_1 & ~exec_op_2 & exec_op_3 -> FEX?(exec_pc);
      exec_func_bit := is_zero_1(stack0_data);
        [ exec_func_bit -> FEX?(exec_pc); exec_temp := pcadd_12(exec_pc, exec_data)
        [] else -> exec_temp := pcincrement_12(exec_pc)
        ]
    [] exec_op_0 & ~exec_op_1 & exec_op_2 & ~exec_op_3 -> FEX?(exec_pc);
      exec_func_bit := is_less_than_zero_1(stack0_data);
        [ exec_func_bit -> exec_temp := pcadd_12(exec_pc, exec_data)
        [] else -> exec_temp := pcincrement_12(exec_pc)
        ]
    ]; FEX!exec_temp
  ]
 ||
 /* STACK */
 stack0_is_full := 0;
	*[ stack0_op_chan?stack0_op;
	[ ~stack0_is_full & stack0_op -> stack0_comm_chan?stack0_data, stack0_is_full := 1
	[] ~stack0_is_full & ~stack0_op -> stack1_op_chan!0; stack1_comm_chan?stack0_data; stack0_comm_chan!stack0_data
	[] stack0_is_full & stack0_op -> stack1_op_chan!1; stack1_comm_chan!stack0_data; stack0_comm_chan?stack0_data
	[] stack0_is_full & ~stack0_op -> stack0_comm_chan!stack0_data, stack0_is_full := 0
	] ] ||
	stack1_is_full := 0;
	*[ stack1_op_chan?stack1_op;
	[ ~stack1_is_full & stack1_op -> stack1_comm_chan?stack1_data, stack1_is_full := 1
	[] ~stack1_is_full & ~stack1_op -> stack2_op_chan!0; stack2_comm_chan?stack1_data; stack1_comm_chan!stack1_data
	[] stack1_is_full & stack1_op -> stack2_op_chan!1; stack2_comm_chan!stack1_data; stack1_comm_chan?stack1_data
	[] stack1_is_full & ~stack1_op -> stack1_comm_chan!stack1_data, stack1_is_full := 0
	] ] ||
	*[ stack2_op_chan?stack2_op;
	[ stack2_op -> stack2_comm_chan?stack2_data
	[] ~stack2_op -> stack2_comm_chan!stack2_data
	] ]
}
